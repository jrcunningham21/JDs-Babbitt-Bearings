@using JDsDataModel.ViewModels
@model JDsDataModel.ViewModels.Processes.ProcessBabbittBearing.BB9_FinishBoreProcessViewModel

@{
    ViewBag.Title = "BB9_FinishBoreProcess";
}
<style>
    disabledAnchor a {
        pointer-events: none !important;
        cursor: default;
        color: Gray;
    }
</style>

<div class="row">
    <h4>Finish Bore Process</h4>
</div>

<form id="process_bb9_form">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Version)
    @Html.HiddenFor(m => m.JobId)
    @Html.HiddenFor(m => m.PartId)
    @Html.HiddenFor(m => m.ProcessId)
    @Html.HiddenFor(m => m.StepId)
    @Html.HiddenFor(m => m.IsUTRequired)
    @Html.HiddenFor(m => m.IsPTRequired)
    @Html.HiddenFor(m => m.IsDisplayUT)
    @Html.HiddenFor(m => m.IsDisplayPT)
    @Html.HiddenFor(m => m.IsCompleted, new { id = "IsCompleted" })
    @Html.HiddenFor(m => m.IsOnlySave, new { id = "IsOnlySave" })

    @*Customer Sizes display row*@
    <div class="container">
        <div class="row col-sm-12">
            @*This is the column that should be emphasized in a panel*@
            <div class="col-sm-5 panel panel-primary" style="margin-left:-20px;">
                <div class="panel-body">
                    <div class="row padd-bottom">
                        <div class="col-sm-4">
                            @Html.LabelFor(m => m.CustomerBoreSize, new { style = "font-size:16px" })
                        </div>
                        <div class="col-sm-1" style="font-size:20px; font-weight:bold;">
                            @Html.DisplayFor(m => m.CustomerBoreSize)
                        </div>
                    </div>
                    <div class="row padd-bottom">
                        <div class="col-sm-4">
                            @Html.LabelFor(m => m.CustomerBoreSizeHorizontal, new { style = "font-size:16px" })
                        </div>
                        <div class="col-sm-1" style="font-size:20px; font-weight:bold;">
                            @Html.DisplayFor(m => m.CustomerBoreSizeHorizontal)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4">
                            @Html.LabelFor(m => m.CustomerODSize, new { style = "font-size:16px" })
                        </div>
                        <div class="col-sm-pull-5 jd-table-cell @(!@Model.CustomerODSize.Any()? "collapse" : "")">
                            <div id="grid_BB8ODSizes">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*This is the boring column that is not to be emphasized*@
            <div class="col-sm-6" style="padding-top: 15px;">
                <div class="row pad-top">
                    <div class="col-sm-3">
                        @Html.LabelFor(m => m.ShaftSize)
                    </div>
                    <div class="col-sm-3">
                        @Html.DisplayFor(m => m.ShaftSize)
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3">
                        @Html.LabelFor(m => m.ClearanceSize)
                    </div>
                    <div class="col-sm-3">
                        @Html.DisplayFor(m => m.ClearanceSize)
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3">
                        @Html.LabelFor(m => m.ShimSize)
                    </div>
                    <div class="col-sm-3">
                        @Html.DisplayFor(m => m.ShimSize)
                    </div>
                </div>
                <div class="row padd-bottom">
                    <div class="col-sm-3">
                        @Html.LabelFor(m => m.Tolerance)
                    </div>
                    <div class="col-sm-3">
                        @Html.DisplayFor(m => m.Tolerance)
                    </div>
                </div>
            </div>
        </div>
    </div>

            

    <div class="row padd-bottom">
        <div class="col-sm-9">
            <div class="row">
                <div class="col-sm-12">
                    @Html.LabelFor(m => m.Notes)
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    @Html.TextAreaFor(m => m.Notes, new { @class="form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2">
            <div class="row">
                <div class="col-sm-12">
                    <label>OD Runout:</label>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    @Html.LabelFor(m => m.Runout1FrontSize)
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Runout1FrontSize, "{0:0.000#}", new { @class = "form-control"})
                </div>
            </div>
            <div class="row padd-top">
                <div class="col-sm-9">
                    @Html.LabelFor(m => m.Runout1BackSize)
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Runout1BackSize, "{0:0.000#}", new { @class = "form-control"})
                </div>
            </div>
            <div class="row padd-top">
                <div class="col-sm-9">
                    @Html.LabelFor(m => m.Runout1MiddleSize)
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Runout1MiddleSize, "{0:0.000#}", new { @class = "form-control"})
                </div>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="row">
                <div class="col-sm-9">
                    <label>ID Runout:</label>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    @Html.LabelFor(m => m.Runout2FaceSize)
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Runout2FaceSize, "{0:0.000#}", new { @class = "form-control"})
                </div>
            </div>
            <div class="row padd-top">
                <div class="col-sm-9">
                    @Html.LabelFor(m => m.Runout2BoreSize)
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Runout2BoreSize, "{0:0.000#}",  new { @class = "form-control"})
                </div>
            </div>
        </div>
    </div>


    <div class="row padd-top padd-bottom">
        <div class="col-sm-6">
            @Html.SignOffHelper(m => m.FinishedBoreBy, "BB9_FinishedBoreBy")
        </div>
    </div>

    @Html.Action("PartTestView", "ProcessBabbitBearing", new { id = @Model.PartId })

    <div class="row padd-top padd-bottom">
        <div class="col-sm-2">
            <a class="btn btn-block btn-primary" id="saveBtn">Save</a>
        </div>
        <div class="col-sm-2">
            <a class="btn btn-block btn-danger" id="cancelBtn">Cancel</a>
        </div>
    </div>
    <div class="extraSpaceAtBtmDiv"></div>
</form>

<div class="modal fade" id="signOffGroupModal" role="dialog">
    <div class="modal-dialog">
        <h4 class="modal-header"> Sign Off Error</h4>
        <div class="modal-body" style="margin-left: 40px">
            <div class="jd-table">
                <div class="jd-table-row">
                    <h4>The following sign offs have not been completed.</h4>
                </div>
            </div>
            <div class="jd-table">
                <div class="row padd-top padd-bottom" id="BB9_FinishedBoreByGroup">
                    <div class="col-sm-7">
                        @Html.SignOffHelper(m => m.FinishedBoreBy, "BB9_FinishedBoreBy1")
                    </div>
                </div>

                <div class="row padd-top">
                    <div class="col-sm-offset-7 col-sm-3">
                        <a id="signoffallbtn" class="btn btn-primary signOffBtn" onclick="OnClickSignOffAll()"><span class="glyphicon glyphicon-minus" aria-hidden="true"></span> SignOff All</a>
                    </div>
                    <div class="col-sm-2">
                        <a id="cancelsignoffallbtn" class="btn btn-danger" onclick="OnClickCancelSignOffAll()">Cancel</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts
{
    <script>

        $(function () {

            $("#grid_BB8ODSizes").kendoGrid({
                dataSource: {
                    data: @Html.Raw(Json.Encode(Model.CustomerODSize.Select(x => new { ODComment = x.ODComment }))),
                },
                scrollable: false,
                columns: [{
                    field: "ODComment",
                    width: 50,
                    title: "OD Sizes"

                }]
            });

            var signOffAllRequested = false;
            $("#signOffModal").on('hidden.bs.modal', function () {
                if( signOffAllRequested == true
                    && $("#BB9_FinishedBoreBy").val())
                {
                    // All sign offs have been signed
                    Save();
                }
                signOffAllRequested = false;
            });
            $("#signoffallbtn").click(function () {
                signOffAllRequested = true;
            });

            setCurrentStep(stepData,'process_BB9_FinishBoreProcessEntry');
            $('#process_BB9_FinishBoreProcessEntry').css('font-size', 12);

            $("#saveBtn").click(function () {
                Save();
            });

            $("#cancelBtn").click(function () {
                Cancel();
            });

        });

        function IsStepValid() {
            var isvalid = 1;

            // Perform signoff validation and dialog...
            if ($('#BB9_FinishedBoreBy').val().trim() == "") {
                isvalid = 0;
                $("#BB9_FinishedBoreByGroup").show();
                $('#BB9_FinishedBoreBy1SO').addClass("btn-danger");
                $('#BB9_FinishedBoreBySO').addClass("btn-danger");
            } else {
                $("#BB9_FinishedBoreByGroup").hide();
                $('#BB9_FinishedBoreBy1SO').removeClass("btn-danger");
                $('#BB9_FinishedBoreBySO').removeClass("btn-danger");
            }

            if (isvalid == 0) {
                $('#signOffGroupModal').modal('show');
                return false;
            }

            return true;
        }

        function Save() {
            if(!IsStepValid()) {
                return false;
            }
            markStepAsCompleted();
            SaveToServer();

            return true;
        }

        function SaveToServer(isOnlySave) {
            isOnlySave = isOnlySave || false;

            if (isOnlySave) {
                $("#IsOnlySave").val(true);
            }

            var json = $("#process_bb9_form").serialize();

            // Apply grid data to model
            $.ajax({
                url: '/ProcessBabbitBearing/Save_BB9_FinishBoreProcess',
                type: 'POST',
                data: json,
                success: function (data) {
                    notification.show({message: "SAVED SUCCESSFULLY"}, "successful");
                    if (!isOnlySave) {
                        window.location.href = "/ProcessBabbitBearing/BB10_FinalAssembly?id=" + '@Html.Raw(Json.Encode(Model.ProcessId))';
                    }
                },
                error: function (response, error) {
                    bootbox.alert(error, function() { });
                }
            });
        }

        function Cancel() {
            window.location.href = "/ProcessBabbitBearing/BB9_FinishBoreProcess?id=" + '@Html.Raw(Json.Encode(Model.ProcessId))';
        }


        function OnClickSignOff(data) {
            navId = 0;
            signOffId = data;

            var skillname = "";

            switch (data) {
                case 'BB9_FinishedBoreBy':
                case 'BB9_FinishedBoreBy1':
                    skillname = "Start/Edit Jobs";
                    addJobChangeLogEntry(@Model.JobId, "Attempting signoff for Finish Bore By");
                    break;

                case 'PTApprovedBy':
                    addJobChangeLogEntry(@Model.JobId, "Attempting signoff for: PT Approved By");
                    skillname = "Management";
                    break;

                case 'UTApprovedBy':
                    addJobChangeLogEntry(@Model.JobId, "Attempting signoff for: UT Approved By");
                    skillname = "Management";
                    break;
            }

            $.ajax({
                url: '@Url.Action("SignOff", "SignOff", new {area = ""})',
                type: 'GET',
                data: { skillName: skillname },
                success: function (data) {
                    $('#signOffContentDiv').html(data);
                    $('#signOffContentDiv').fadeIn('fast');
                    $('#signOffModal').modal('show');
                },
                error: function (e) {
                    bootbox.alert("Not Authorized", function () {});
                    $("#signOffModal").modal('hide');
                }
            });
        }

        function OnClickSignOffAll() {
            navId = 0;
            var ids = "";
            var count = 0;

            addJobChangeLogEntry(@Model.JobId, "Attempting signoff for all Finish Bore Process");

            if ($('#BB9_FinishedBoreBy').val().trim() == "") {
                ids = ids + "BB9_FinishedBoreBy";
                count = count + 1;
            }

            signOffId = ids;
            var skillname = "Management";

            $.ajax({
                url: '@Url.Action("SignOff", "SignOff", new {area = ""})',
                type: 'GET',
                data: { skillName: skillname },
                success: function(data) {
                    $('#signOffContentDiv').html(data);
                    $('#signOffContentDiv').fadeIn('fast');
                    $('#signOffModal').modal('show');
                    $('#signOffGroupModal').modal('hide');
                },
                error: function(e) {
                    bootbox.alert("Not Authorized", function () {});
                    $("#signOffModal").modal('hide');
                }
            });
        }

        function OnClickCancelSignOffAll()
        {
            // capture any completed signoffs--definition on site.js
            captureCompletedSignoffs();

            $('#signOffGroupModal').modal('hide');
        }
    </script>
}

