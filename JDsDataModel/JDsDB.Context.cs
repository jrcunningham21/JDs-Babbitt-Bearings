//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JDsDataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JDsDBEntities : DbContext
    {
        public JDsDBEntities()
            : base("name=JDsDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AutoComplete> AutoCompletes { get; set; }
        public virtual DbSet<AutoCompleteEntry> AutoCompleteEntries { get; set; }
        public virtual DbSet<CertificateFile> CertificateFiles { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DeliveryInfo> DeliveryInfoes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeFile> EmployeeFiles { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobStatu> JobStatus { get; set; }
        public virtual DbSet<MeasurementList> MeasurementLists { get; set; }
        public virtual DbSet<PartProcess> PartProcesses { get; set; }
        public virtual DbSet<PartStatu> PartStatus { get; set; }
        public virtual DbSet<PartType> PartTypes { get; set; }
        public virtual DbSet<PhotoType> PhotoTypes { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<ProcessType> ProcessTypes { get; set; }
        public virtual DbSet<SignOff> SignOffs { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<Step> Steps { get; set; }
        public virtual DbSet<StepActivity> StepActivities { get; set; }
        public virtual DbSet<TimesheetEntry> TimesheetEntries { get; set; }
        public virtual DbSet<Vacation> Vacations { get; set; }
        public virtual DbSet<Part> Parts { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<ChangeLogEntry> ChangeLogEntries { get; set; }
        public virtual DbSet<IncomingInspectionAccessory> IncomingInspectionAccessories { get; set; }
        public virtual DbSet<PartPhoto> PartPhotoes { get; set; }
        public virtual DbSet<PartFile> PartFiles { get; set; }
        public virtual DbSet<PartTest> PartTests { get; set; }
        public virtual DbSet<PartDiameterMeasurement> PartDiameterMeasurements { get; set; }
    
        public virtual int UpdateEmployeeSkill(Nullable<int> empID, Nullable<int> skillID, Nullable<bool> hasSkill)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var skillIDParameter = skillID.HasValue ?
                new ObjectParameter("skillID", skillID) :
                new ObjectParameter("skillID", typeof(int));
    
            var hasSkillParameter = hasSkill.HasValue ?
                new ObjectParameter("hasSkill", hasSkill) :
                new ObjectParameter("hasSkill", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeSkill", empIDParameter, skillIDParameter, hasSkillParameter);
        }
    
        public virtual int EmployeeHasSkill(Nullable<int> empID, Nullable<int> skillID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var skillIDParameter = skillID.HasValue ?
                new ObjectParameter("skillID", skillID) :
                new ObjectParameter("skillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeHasSkill", empIDParameter, skillIDParameter);
        }
    }
}
